#!/usr/sbin/nft
flush ruleset

# Fully Qualified Verdict Name for logging
# nft.<hook>.<zone>.<verdict>

define nic_wan = {{ nftables_nic_wan }}
define nic_lan = {{ nftables_nic_lan }}
define nic_man = {{ nftables_nic_man }}
define nic_vpn = {{ nftables_nic_vpn }}

table inet primary {
    chain input_dispatch {
      type filter hook input priority 0; policy drop;
      iiftype loopback accept comment "Accept any loopback traffic"
      
      # -{ Conntrack Verdict Map }
      ct state vmap {
        new: continue, invalid: drop,
        established: accept, related: accept
      } comment "Accept established and related connections"

{% for zone in nftables_rulesets.zones %}
{%   if zone.input_rules is defined or zone.input_policy is defined %}
      #-{ Dispatch {{ zone.name }} interfaces }
{%     for interface in zone.member_interfaces %}
      meta iifname {{ interface }} jump input_zone_{{ zone.name }}
{%     endfor %}

{%   endif %}
{% endfor %}
      # -{Final Verdict of incoming connections}
      counter log prefix "nft.input.dispatch.reject " reject with icmpx type admin-prohibited
    }

{% for zone in nftables_rulesets.zones %}
{%   if zone.input_rules is defined or zone.input_policy is defined %}
    chain input_zone_{{ zone.name }} {
{%     if zone.input_rules is defined %}
{%       for rule in zone.input_rules %}
{%         if rule.comment is defined %}
      #-{ {{ rule.comment }} }
{%         endif %}
{%         for match in rule.matches %}
      {{ match | replace('\n', '') }} counter log prefix "nft.input.{{ zone.name }}.{{ rule.verdict }} " {{ rule.verdict }}
{%         endfor %}

{%       endfor %}

{%     endif %}
{%   if zone.input_policy is defined %}
      #-{ Chain Policy }
{%     if "return" not in zone.input_policy %}
      counter log prefix "nft.input.{{ zone.name }}.{{ zone.input_policy.split(' ')[0] }} " {{ zone.input_policy }}
{%     else %}
      {{ zone.input_policy }}
{%     endif %}
{%   endif %}
    }

{%   endif %}
{% endfor %}

    chain forward_dispatch {
      type filter hook forward priority 0; policy drop;
      
      # -{ Conntrack Verdict Map }
      ct state vmap {
          new: continue, invalid: drop,
          established: accept, related: accept
      } comment "Accept established and related connections"

{% for zone in nftables_rulesets.zones %}
{%   if zone.forward_rules is defined or zone.forward_policy is defined %}
      #-{ Dispatch {{ zone.name }} interfaces }
{%     for interface in zone.member_interfaces %}
      meta iifname {{ interface }} jump forward_zone_{{ zone.name }}
{%     endfor %}

{%   endif %}
{% endfor %}
      # -{Final Verdict of incoming connections}
      counter log prefix "nft.forward.dispatch.reject " reject with icmpx type admin-prohibited
    }

{% for zone in nftables_rulesets.zones %}
{%   if zone.forward_rules is defined or zone.forward_policy is defined %}
    chain forward_zone_{{ zone.name }} {
{%     if zone.forward_rules is defined %}
{%       for rule in zone.forward_rules %}
{%         if rule.comment is defined %}
      #-{ {{ rule.comment }} }
{%         endif %}
{%         for match in rule.matches %}
      {{ match | replace('\n', '') }} counter log prefix "nft.forward.{{ zone.name }}.{{ rule.verdict }} " {{ rule.verdict }}
{%         endfor %}
{%       endfor %}

{%     endif %}
{%   if zone.forward_policy is defined %}
      #-{ Chain Policy }
{%     if "return" not in zone.forward_policy %}
      counter log prefix "nft.forward.{{ zone.name }}.{{ zone.forward_policy.split(' ')[0] }} " {{ zone.forward_policy }}
{%     else %}
      {{ zone.forward_policy }}
{%     endif %}
{%   endif %}
    }

{%   endif %}
{% endfor %}

    chain prerouting_dispatch {
      type nat hook prerouting priority -100;

{% for zone in nftables_rulesets.zones %}
{%   if zone.prerouting_rules is defined %}
      #-{ Dispatch {{ zone.name }} interfaces }
{%     for interface in zone.member_interfaces %}
      meta iifname {{ interface }} jump prerouting_zone_{{ zone.name }}
{%     endfor %}
{%   endif %}
{% endfor %}
    }

{% for zone in nftables_rulesets.zones %}
{%   if zone.prerouting_rules is defined%}
    chain prerouting_zone_{{ zone.name }} {
{%     if zone.prerouting_rules is defined %}
{%       for rule in zone.prerouting_rules %}
{%         if rule.comment is defined %}
      #-{ {{ rule.comment }} }
{%         endif %}
{%         for match in rule.matches %}
      ct state new {{ match | replace('\n', '') }} counter log prefix "nft.prerouting.{{ zone.name }}.{{ rule.verdict.split(' ')[0] }} " {{ rule.verdict }}
{%         endfor %}
{%       endfor %}
{%     endif %}
    }
{%   endif %}
{% endfor %}

    chain postrouting_dispatch {
      type nat hook postrouting priority srcnat;

{% for zone in nftables_rulesets.zones %}
{%   if zone.postrouting_rules is defined %}
      #-{ Dispatch {{ zone.name }} interfaces }
{%     for interface in zone.member_interfaces %}
      meta iifname {{ interface }} jump postrouting_zone_{{ zone.name }}
{%     endfor %}
{%   endif %}
{% endfor %}
    }

{% for zone in nftables_rulesets.zones %}
{%   if zone.postrouting_rules is defined%}
    chain postrouting_zone_{{ zone.name }} {
{%     if zone.postrouting_rules is defined %}
{%       for rule in zone.postrouting_rules %}
{%         if rule.comment is defined %}
      #-{ {{ rule.comment }} }
{%         endif %}
{%         for match in rule.matches %}
      ct state new {{ match | replace('\n', '') }} counter log prefix "nft.postrouting.{{ zone.name }}.{{ rule.verdict.split(' ')[0] }} " {{ rule.verdict }}
{%         endfor %}
{%       endfor %}
{%     endif %}
    }

{%   endif %}
{% endfor %}
}

table inet suricata {
  # -{Support table for suricata IPS}
  chain ips-filter-input {
    type filter hook input priority -10;
    iifname $nic_wan queue bypass
  }
  chain ips-filter-forward {
    type filter hook forward priority -10;
    iifname $nic_wan queue bypass
  }
}
